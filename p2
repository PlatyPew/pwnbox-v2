#!/usr/bin/env bash

# Constant variables
P2=`basename "$0"`
ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Print general usage and exits
USAGE() {
    printf "USAGE:
  ${P2} <SUBCOMMAND>

SUBCOMMAND:
  build     Build Docker image
  attach    Attach into container
  rm        Remove container and its volumes
  kill      Stop container from running
  volume    Enter into container's volume
  ls        List pwnboxes
  update    Update image to the latest build
  aslr      Set aslr

HELP:
  ${P2} build -h
  ${P2} attach -h
  ${P2} rm -h\n"
  exit 1
}

ASLR() {
    ASUSE() {
        printf "USAGE:
  ${P2} aslr <on/off>\n"
        exit 1
    }

    aslr=""

    if [[ ${2} == "on" ]]; then
        aslr=2
    elif [[ ${2} == "off" ]]; then
        aslr=0
    else
        ASUSE
    fi

    if [[ $OSTYPE == 'darwin'* ]]; then
        docker run --rm --privileged --entrypoint "" -it platypew/pwnbox2 sh -c "echo ${aslr} > /proc/sys/kernel/randomize_va_space"
    else
        echo "${aslr}" | sudo tee /proc/sys/kernel/randomize_va_space > /dev/null
    fi
}

# Build docker image
BUILD() {
    BUSE() {
        printf "USAGE:
  ${P2} build [OPTIONS]
OPTIONS:
  -c    compress build context
  -s    squash layers (requries experimental mode)
  -p    platform\n"
        exit 1
    }

    squash=""
    compress=""
    platform=""

    shift
    while getopts ":scp:" options
    do
        case $options in
            c) compress="--compress"
                ;;
            s) squash="--squash"
                ;;
            p) platform="--platform $OPTARG"
                ;;
            *) BUSE
                ;;
        esac
    done
    docker image build $platform $squash $compress -t platypew/pwnbox2 $ROOT
}

# Start and attach docker container
ATTACH() {
    AUSE() {
        printf "USAGE:
  ${P2} attach [OPTIONS] <BOX>
OPTIONS:
  -P    use privileged mode (not recommended)
  -X    support X11 forwarding
  -D    run as daemon mode
  -e    use environmental variables
          FOO=bar
  -d    display (use with -X)
  -p    port range (default: 22, default port will map to random host port)
          1337-31337
  -v    mount volumes
          /foo/bar:/foo/bar\n"
        exit 1
    }

    env=""
    port="-p $(( ((RANDOM<<15)|RANDOM) % 10000 + 40000 )):22"
    volume=""
    priv=""
    xsupport=""
    display=""

    detach=0

    shift
    while getopts ":PXDe:d:p:v:" options
    do
        case $options in
            P) priv="--privileged"
                ;;
            X) xsupport="-v /tmp/.X11-unix:/tmp/.X11-unix:rw"
                ;;
            D) detach=1
                ;;
            d) display="$OPTARG"
                ;;
            e) env="-e $OPTARG"
                ;;
            p) port="-p $OPTARG:$OPTARG"
                ;;
            v) volume="-v $OPTARG"
                ;;
            *) AUSE
                ;;
        esac
    done
    shift $(($OPTIND - 1))

    box_name=${1}

    if [ -z ${box_name} ]; then
        AUSE
    fi


    # Check if there's display running x11
    if [[ ! -z $xsupport ]]; then
        if [[ ! -d "/tmp/.X11-unix" ]]; then
            printf "/tmp/.X11-unix not found\n"
            exit 1
        fi

        if [[ -z $display ]]; then
            if [[ $OSTYPE == 'darwin'* ]]; then
                display="host.docker.internal:0"
            else
                display=$DISPLAY
            fi
        fi

        xsupport="${xsupport} -e DISPLAY=${display}"
    fi

    tz=""
    if [[ $OSTYPE == 'darwin'* ]]; then
        tz=$(readlink /etc/localtime | sed 's#/var/db/timezone/zoneinfo/##g')
    else
        tz=$(readlink /etc/localtime | sed 's#/usr/share/zoneinfo/##g')
    fi

    printf "Making directory...\n"
    mkdir $ROOT/${box_name} 2> /dev/null
    printf "Directory located at: $ROOT/${box_name}\n"

    # Attaches if container exists
    if [ $(docker ps -a --filter "name=^/${box_name}$" --format '{{.Names}}') ]; then
        printf "Container exists, reattaching...\n"
        docker start ${box_name} > /dev/null
    else
        printf "SSH tunneling to create a proxy\n"
        printf "ssh -D localhost:<port of proxy> pwnbox@localhost -p <port of sshd>\n"
        docker run -it -d \
            -h ${box_name} \
            --name ${box_name} \
            -e TZ=${tz} \
            --cap-add=SYS_PTRACE \
            --cap-add=NET_ADMIN \
            --security-opt seccomp=unconfined \
            --mount type=bind,source="$ROOT/${box_name}",target=/mnt/shared \
            --sysctl net.ipv6.conf.all.disable_ipv6=0 \
            --device /dev/net/tun \
            --cgroupns=host \
            -v /sys/fs/cgroup:/sys/fs/cgroup:rw \
            --tmpfs /run \
            --tmpfs /tmp \
            ${xsupport} \
            ${priv} \
            $env $port $volume \
            platypew/pwnbox2 sh

        if [ $? -ne 0 ]; then
            printf "An error has occured. Check arguments\n\n"
            AUSE
        fi
    fi

    if [ $detach -eq 0 ]; then
        docker exec -it "${box_name}" su pwnbox
    fi
}

# Removes pwnbox
RM() {
    RUSE() {
        printf "USAGE:
  ${P2} rm [OPTIONS] <BOX>
OPTIONS:
  -f    forcefully remove mounted shared directory\n"
        exit 1
    }

    force=0

    shift
    while getopts ":f" options
    do
        case $options in
            f) force=1
                ;;
            *) RUSE
                ;;
        esac
    done
    shift $(($OPTIND - 1))

    box_name=${1}

    printf "Are you sure you want to remove ${box_name}? This cannot be undone! (y/n) "
    read confirmation

    if [ -z $confirmation ] || [ $confirmation != "y" ]; then
        exit 0
    fi

    if [ -z ${box_name} ]; then
        RUSE
    fi

    printf "Attempting to remove container\n"
    docker rm ${box_name} -f &> /dev/null

    if [ $? -ne 0 ]; then
        printf "Container does not exist\n\n"
        RUSE
    fi

    printf "Cleaning directory\n"
    if [ $force -eq 0 ]; then
        rmdir $ROOT/${box_name} 2> /dev/null

        if [ $? -ne 0 ]; then
            printf "Directory not empty, not removing...\n"
        fi
    else
        rm -rvf $ROOT/${box_name}
    fi

}

KILL() {
    KUSE() {
        printf "USAGE:
  ${P2} kill <BOX>\n"
    }
    if [ -z $2 ] ; then
        KUSE
        exit 1
    fi

    box_name=${2}

    printf "Are you sure you want to kill ${box_name}? This will stop all processes running! (y/n) "
    read confirmation

    if [ -z $confirmation ] || [ $confirmation != "y" ]; then
        exit 0
    fi

    docker stop "${box_name}"
}

VOLUME() {
    VUSE() {
        printf "USAGE:
  ${P2} volume <BOX>\n"
        exit 1
    }
    if [ -z $2 ]; then
        VUSE
    fi

    cd "$ROOT/$2" 2> /dev/null
    exec $SHELL

    if [ $? -ne 0 ]; then
        VUSE
    fi
}

LIST() {
    docker container ls -a --filter "ancestor=platypew/pwnbox2" --format "table {{.Names}}\t{{.Status}}\t{{.Size}}\t{{.RunningFor}}\t{{.Ports}}"
}

UPDATE() {
    DIR=$(dirname $0)
    git -C $DIR fetch origin master && git -C $DIR pull origin master --rebase
    docker pull platypew/pwnbox2:latest
    id=`docker images platypew/pwnbox2 | grep none | awk '{print $3}'`
    if [ ! -z $id ]; then
        docker rmi $id
    fi

}

if [ -z ${1} ]; then
    USAGE
fi

case ${1} in
    build) BUILD $@
        ;;
    attach) ATTACH $@
        ;;
    kill) KILL $@
        ;;
    rm) RM $@
        ;;
    volume) VOLUME $@
        ;;
    ls) LIST
        ;;
    update) UPDATE
        ;;
    aslr) ASLR $@
        ;;
    *) USAGE
        ;;
esac

