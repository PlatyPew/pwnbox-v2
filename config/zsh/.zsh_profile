## Libraries for qemu ######################################
export LD_LIBRARY_PATH="/lib:/lib64"
############################################################

## Python3 #################################################
ve() {
    if [[ -z ${VIRTUAL_ENV} ]]; then
        if [[ ! -d venv ]]; then
            virtualenv venv
        fi
        source venv/bin/activate
        echo "python:  $(which python3)"
        echo "pip:     $(which pip3)"
    else
        echo "You are already in a virtual environment"
        return 1
    fi
}
alias de='deactivate'

alias python='python3'
alias pip='pip3'
############################################################

## Misc Functions ##########################################
# List directories when directory is changed
chpwd() {
    exa -a --icons
}

# Clipboard
alias clip="(base64 | xargs -0 printf '\e]52;c;%s\007')"

## FZF functions ###########################################
f() {
    MYSEARCH="*"
    if [ ! -z $1 ]
    then
        MYSEARCH="${1}"
    fi

    locate "${MYSEARCH}" | fzf -m --ansi --preview '[[ $(file --mime {}) =~ binary ]] && echo $(basename {}) is a binary file \($(file --mime-type {} | cut -d ":" -f 2 | cut -c 2-)\) || (bat --color=always --style=header,grid --line-range :200 {})'
}

_ff() {
    MYPATH=$1
    FILE=$(rg ${MYPATH} --files --hidden --no-ignore-vcs -g '!.git/*' 2> /dev/null | fzf --ansi --preview '[[ $(file --mime {}) =~ binary ]] && echo $(basename {}) is a binary file \($(file --mime-type {} | cut -d ":" -f 2 | cut -c 2-)\) || (bat --color=always --style=header,grid --line-range :200 {})')

    if [ ! -z $FILE ]
    then
        echo ${FILE}
    fi
}

ff() {
    _ff ${MYPATH}
}

ffo() {
    nvim "$(_ff ${MYPATH})"
}

fd() {
    MYPATH="."
    if [ ! -z $1 ]
    then
        MYPATH="${1}"
    fi

    DIR="$(find ${MYPATH} -type d -name ".git" -prune -o -type d -print 2> /dev/null | fzf --ansi --preview 'exa -T --level 1 --color always {}')"

    if [ ! -z $DIR ]
    then
        cd "${DIR}"
    fi
}

ft(){
    if [ -z ${1} ]
    then
        echo "Usage: ${0} <search term> [path]"
        return
    fi

    MYPATH="."
    if [ ! -z $2 ]
    then
        MYPATH="${2}"
    fi

    local match=$(
      rg --hidden --trim --vimgrep --color=never --line-number "$1" ${MYPATH} 2> /dev/null |
        fzf --no-multi --delimiter : \
            --preview "bat --color=always --line-range {2}: {1}"
      )
    local file=$(echo "$match" | cut -d':' -f1)
    if [[ -n $file ]]; then
        nvim $file +$(echo "$match" | cut -d':' -f2)
    fi
}

export FZF_DEFAULT_COMMAND='rg $(pwd) --files --hidden --no-ignore-vcs -g "!.git/*" 2> /dev/null'
export BAT_THEME='TwoDark'
############################################################

## Ngrok ###################################################
# Publish a port online using ngrok
publish() {
    local USAGE() {
        printf "publish <start|stop|status> [port]\n"
    }

    if [ -z ${1} ]; then
        USAGE
        return 1
    fi

    if [ ${1} = "start" ]; then
        if [ -z ${2} ]; then
            USAGE
            return 1
        fi

        if [ ! -f "$HOME/.ngrok2/ngrok.yml" ]; then
            printf "Enter auth token: "
            read token
            ngrok authtoken $token
        fi

        ngrok tcp --log=stdout ${2} > /dev/null &
        export NGROK_PID=$!
        sleep 2
        export NGROK_PORT=${2}
        printf "Port forwarding 0.0.0.0:${NGROK_PORT} -> "
        curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])" | cut -f 3 -d '/'
    elif [ ${1} = "stop" ]; then
        kill $NGROK_PID
        export NGROK_PORT=""
    elif [ ${1} = "status" ]; then
        printf "Port forwrding 0.0.0.0:${NGROK_PORT} -> "
        curl -s http://localhost:4040/api/tunnels | python3 -c "import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])" | cut -f 3 -d '/'
    else
        USAGE
        return 1
    fi
}
############################################################

### ASLR Toggle ############################################
aslr() {
    if [[ ${1} == off && ${ASLR_DISABLE} != 1 ]]; then
        zsh -c "export ASLR_DISABLE=1; setarch `uname -m` -R /bin/zsh"
    elif [[ ${1} == on && ${ASLR_DISABLE} == 1 ]]; then
        exit
    fi
}
############################################################

### GUI Controls ###########################################
gui () {
    subcmd=${1}
    if [[ ! -f "/usr/sbin/Xvfb" ]]; then
        printf "GUI only available in extra package\n"
        return 1
    fi
    if [[ ${subcmd} == "start" ]]; then
        tmux new-session -d -s novnc
        tmux send-keys -t novnc " Xvfb :0 -screen 0 1920x1080x24" Enter
        tmux new-window -t novnc
        tmux send-keys -t novnc:1 " x11vnc -display :0" Enter
        tmux new-window -t novnc
        tmux send-keys -t novnc:2 " novnc" Enter
        tmux new-window -t novnc
        tmux send-keys -t novnc:3 " sleep 3; DISPLAY=:0 i3" Enter
        export DISPLAY=":0"
        printf "http://$(hostname):6080/vnc.html?host=$(hostname)&port=6080\n"
    elif [[ ${subcmd} == "stop" ]]; then
        pkill Xvfb
        tmux kill-session -t novnc
        export DISPLAY=""
    else
        printf "gui <start|stop|left|right|full> [process]\n"
    fi
}
############################################################

### Intel Chroot ###########################################
intel-pacman () {
    if [[ $(uname -m) != "aarch64" ]]; then
        printf "Only available on arm64\n"
        return 1
    fi

    CHROOT="/intel"
    if [[ ! -d $CHROOT ]]; then
        sudo mkdir -p $CHROOT
        sudo mkdir -p $CHROOT/proc
        sudo mkdir -p $CHROOT/sys
        sudo mkdir -p $CHROOT/dev

        sudo mount -t proc proc $CHROOT/proc
        sudo mount -t sysfs sys $CHROOT/sys
        sudo mount -o bind /dev $CHROOT/dev

        sudo mkdir -p $CHROOT/usr/lib/locale
        sudo cp $HOME/.local/lib/locale-archive $CHROOT/usr/lib/locale/locale-archive
    fi
    sudo umount $CHROOT/sys

    if [[ -z $1 ]]; then
        PACMAN_OPT="-h"
    else
        PACMAN_OPT=$1
    fi

    if [[ ! -z $2 ]]; then
        shift
        sudo pacman64 -O "${PACMAN_OPT}" $CHROOT $@
    else
        sudo pacman64 -O "${PACMAN_OPT}" $CHROOT
    fi

    sudo mount -t sysfs sys $CHROOT/sys
}

intel-run () {
    if [[ $(uname -m) != "aarch64" ]]; then
        printf "Only available on arm64\n"
        return 1
    fi

    CHROOT="/intel"
    if [[ ! -d $CHROOT ]]; then
        sudo mkdir -p $CHROOT
        sudo mkdir -p $CHROOT/proc
        sudo mkdir -p $CHROOT/sys
        sudo mkdir -p $CHROOT/dev

        sudo mount -t proc proc $CHROOT/proc
        sudo mount -t sysfs sys $CHROOT/sys
        sudo mount -o bind /dev $CHROOT/dev

        sudo mkdir -p $CHROOT/usr/lib/locale
        sudo cp $HOME/.local/lib/locale-archive $CHROOT/usr/lib/locale/locale-archive
    fi

    sudo chroot $CHROOT $@
}
############################################################

## Aliases #################################################
alias vi="nvim"
alias :q='exit'
alias cls='clear'
alias ls='exa --icons'
alias cat='bat'
alias gdb='gdb-multiarch -q'
alias r2='rizin'
alias nmap='nmap --privileged'
############################################################
